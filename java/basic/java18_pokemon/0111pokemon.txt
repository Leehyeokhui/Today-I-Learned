객체 관계 - 포함, 상속

포함 : has a
상속 : is a

상속 : 
코드 재사용성 높임
하나의 코드로 다양한 실행을 가능하게 함
하위 클래스에 아웃라인을 제공(추상클래스)
조립형 - 개발시간 단축, 코드의 신뢰성을 높임
        
피카추, 꼬부기, 이상해씨
Pokemon
int hp (0이면 죽음)
int exp
int level

메소드
밥먹기 - hp 증가
잠자기 - hp 증가
놀기 - hp 감소, exp 증가, 죽었나 확인, 레벨업 확인
운동하기 - hp 감소, exp 증가, 죽었나 확인, 레벨업 확인
레벨업
info()

-----------------접근제어자----------------------
접근 제어자
클래스 접근 제어자 : 디폴트, public, 
                    inner 클래스(클래스 안에 클래스를 만드는 경우)에 private 붙이기도 있다.

멤버 접근제어자(visible) - 멤버 변수나 메소드를 다른 클래스, 같은 패키지, 다른 패키지 등에 얼만큼 접근을 허용할지를 지정.
private - 클래스 내에서만 보임, 상속관계에서 부모의 private 자식에서 못쓴다.
            멤버변수에 지정. 은닉성 데이터 보호. 
            public형 setter, getter 제공(오픈하고자 하는 내용만)
default(키워드 생략) - 같은 패키지 내에서 사용가능.
protected - 상속과 관련된 접근 제어자. 같은 패키지에서는 public과 동일
	   다른 패키지에서는 상속관계의 클래스에는 public으로 보이고 비상속관계 클래스에는 private으로 보임.
public - 다른 패키지에서도 보임. 

--------------추상클래스----------------
추상클래스 : 추상 메소드를 하나라도 포함한 클래스. 객체를 만들 수 없음. 완성을 해야 객체생성(상속 받은 클래스에서 모든 추상메소드를 구현해야 객체를 생성할 수 있음)

추상메소드 : 구현하지 않고 프로토타입(메소드선언)만 가진 메소드

abstract class Parent{//미완성
	//반환타입 이름 파라미터
	abstract void add(int a, int b) ; //메소드 선언, 메소드 프로토타입 {}로 만들면 내용 없어도 구현한것임
}
추상클래스 - 상속을 목적으로 하는 클래스의 메소드를 구현할 필요가 없음.
	     하위클래스에서 원하는 모양으로 구현
하위클래스에 아웃라인을 잡아준다 - 추상클래스의 역할
이 추상클래스를 상속 받으면 모든 추상메소드를 구현해야 객체생성 가능
그러므로 적어도 이 메소드들은 구현해야한다는 아웃라인 제공
멤버 변수나 메소드를 더 추가하는 것은 상관 없음


---------인터페이스------------
자바의 상속 - 단일 상속. 다중상속은 불가능
expends는 단일 상속만 가능
interface 기반은 다중상속도 가능 -> implements + 인터페이스키워드

Runnable : Thread 대응 인터페이스, thread를 만들기 위해 상속받는 인터페이스(다중상속에서 사용, 단일 상속이라면 extends Thread를 사용)

다중 상속이 필요 => 인터페이스를 사용한 다중 상속 가능

인터페이스의 목적(활용)
1. 다중상속
2. 조립형 개발

인터페이스는 완전한 추상클래스
인터페이스는 정의 키워드가 interface.
인터페이스는 상수와 추상메소드로만 구성가능
interface B{
     public static final int NUM1;
     public static final int NUM2;

     int NUM1; // 상수로 정의됨
     int NUM2; // public static final이 생략되어 있어 그냥 선언해도 상수로 정의됨

     abstract public void test1(int a);
     void test1(int a); //abstract public 생략 가능
}










